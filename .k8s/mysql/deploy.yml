# Create mysql-ns Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: mysql-ns
---
# Create Resource Quota for mysql-ns Namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: mysql-ns-rq
spec:
  hard:
    requests.cpu: "1000m"
    requests.memory: 2Gi
    limits.cpu: "2000m"
    limits.memory: 4Gi
---
# Create Storage Class with Azure File to Azure Kubernetes Service
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: mysql-sc-azurefile
provisioner: file.csi.azure.com
allowVolumeExpansion: true
mountOptions:
  - file_mode=0777
  - mfsymlinks
  - uid=999
  - dir_mode=0777
  - gid=999
  - actimeo=30
  - cache=strict
  - nobrl
parameters:
  skuName: Standard_LRS
---
# Create MySQL to Azure Kubernetes Service
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: mysql-sc-azurefile
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
stringData:
  MYSQL_ROOT_PASSWORD: "YourSecureMySQLPassword" #Replace with a proper password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:8.0
        name: mysql
        envFrom:
        - secretRef:
            name: mysql-secret
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1
            memory: 2Gi
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  type: ClusterIP
  selector:
    app: mysql
